* Reflect: Using a remote repository
  When would you want to use a remote repository rather than keeping all your
  work local?
  
Whenever I care about my work :-) Local changes are inherently unsafe. A remote 
backup is always a good idea, as it provides an extra recovery point in case 
something bad happens with the local copy.

Also, whenever I want to access my work from a different machine or share it
with somebody else, a remote repository is a very good solution.



* Reflect: Manual vs. automatic pull
  Why might you want to always pull changes manually rather than having Git
  automatically stay up-to-date with your remote repository?
  
Firstly, you want to be aware of the changes, as these might affect your own
work. Secondly, you want control over the moment when you pull changes, so they
would not become a random distraction when you're in the middle of something.



* Reflect: Forks, Clones, and Branches
  Describe the differences between forks, clones, and branches. When would you use
  one instead of another?

Forks > Clones > Branches (> stands for "includes")
Use fork whenever you want to modify a project that you don't have write
permissions on.
Use clone whenever you start working on a new machine (that dosen't have the
repository locally) or when you want a fresh copy of the repository (seldom
needed, probably not recommended).
Use branch whenever you start messing up with your work (in a loving way, of
course) in a way that you feel might not end up in the master branch.



* Reflect: Local copies of remote branches
  What is the benefit of having a copy of the last known state of the remote
  stored locally?

In the process of development, you have to refer to the "current" state of the
repository as often as possible, and a local copy of this "last known current
state" is required for at least 3 reasons: 
 - consistency - the remote might change while you're in the middle of a merge;
 - performance - accessing a remote repository is far slower than accessing its
   local copy;
 - offline access - sometimes, remote access is simply not possible.



* Reflect: Collaboration using Git and GitHub
  How would you collaborate without using Git or GitHub? What would be easier,
  and what would be harder?

Simply put, collaboration without using Git (and GitHub) would be harder. The
only thing that would/might be easier is the experience of learning how to use
these tools.



***
Always have the branch you want to merge into checked out before running git
pull, because the merge is done automatically into the checked out branch!
Make clear distinction between the branch name and the pull request name (make
it longer, to avoid confusion).



* Reflect: When to use a separate branch
  When would you want to make changes in a separate branch rather than directly
  in master? What benefits does each approach have?

Despite the more involved work required to make changes in a separate branch, I
think it is the best idea whenever you collaborate on a project, as it makes it
clear for everyone involved what is (and should remain) stable, and what is
changing.
However, there are probably changes that should still go directly to master,
such as style changes (formatting code, organizing imports), which do not affect
functionality. But this subjective, and must be discussed with the person
responsible for maintaining the master before doing it.
When working alone on a project, it's up to you to choose what needs a separate
branch and what not. It might be though that the time saved by working directly
in master is not worth it, as most merges should be automatic.

-------------------------------------------------------------------------------

Learned Commands Summary:

git push <remote-repository = 'where'> <branch = 'what'> - publish your changes
            to the remote repository
            
git pull <remote> <branch> - update your local copy with the latest changes 
            available in the remote repo AND merge them into the checked in
            branch. Equivalent with running the following 2 commands
            sequentially: 
git fetch   - update your local copy with the latest changes available in the 
            remote repo.
git merge <source-branch> <dest-branch> - merge changes
            
git stash - temporarily saves changes until later; Useful example from the git
          man page (Interrupted workflow): When you are in the middle of
          something, your boss comes in and demands that you fix something
          immediately. You can use git stash like this:

               # ... hack hack hack ...
               $ git stash
               $ edit emergency fix
               $ git commit -a -m "Fix in a hurry"
               $ git stash pop
               # ... continue hacking ...
               
git revert  - Revert some existing commits, creating a commit with the "inverse" 
              changes; it is a commit that effectively "undoes" other commits;
              To discard changes, use git reset:
git reset --hard [HEAD | HEAD^ | HEAD^^ | HEAD~3]
