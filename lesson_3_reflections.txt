* Reflect: Using a remote repository
  When would you want to use a remote repository rather than keeping all your
  work local?
  
Whenever I care about my work :-) Local changes are inherently unsafe. A remote 
backup is always a good idea, as it provides an extra recovery point in case 
something bad happens with the local copy.

Also, whenever I want to access my work from a different machine or share it
with somebody else, a remote repository is a very good solution.



* Reflect: Manual vs. automatic pull
  Why might you want to always pull changes manually rather than having Git
  automatically stay up-to-date with your remote repository?
  
Firstly, you want to be aware of the changes, as these might affect your own
work. Secondly, you want control over the moment when you pull changes, so they
would not become a random distraction when you're in the middle of something.



* Reflect: Forks, Clones, and Branches
  Describe the differences between forks, clones, and branches. When would you use
  one instead of another?

Forks > Clones > Branches (> stands for "includes")
Use fork whenever you want to modify a project that you don't have write
permissions on.
Use clone whenever you start working on a new machine (that dosen't have the
repository locally) or when you want a fresh copy of the repository (seldom
needed, probably not recommended).
Use branch whenever you start messing up with your work (in a loving way, of
course) in a way that you feel might not end up in the master branch.



* Reflect: Local copies of remote branches
  What is the benefit of having a copy of the last known state of the remote
  stored locally?

In the process of development, you have to refer to the "current" state of the
repository as often as possible, and a local copy of this "last known current
state" is required for at least 3 reasons: 
 - consistency - the remote might change while you're in the middle of a merge;
 - performance - accessing a remote repository is far slower than accessing its
   local copy;
 - offline access - sometimes, remote access is simply not possible.



* Reflect: Collaboration using Git and GitHub
  How would you collaborate without using Git or GitHub? What would be easier,
  and what would be harder?

Simply put, collaboration without using Git (and GitHub) would be harder. The
only thing that would/might be easier is the experience of learning how to use
these tools.
